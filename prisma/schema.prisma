generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  githubId      String?  @unique
  githubData    Json?    // Store GitHub data as JSON (followers, repos, issues, PRs)
  followers     Json?    // Store followers as a list of GitHub follower objects
  repos         Json?    // Store repositories data as a list
  issues        Json?    // Store issues data as a list
  prs           Json?    // Store PR data as a list
  recentActivity Json?   // Store recent activity data as a list

  // Optional: Add additional fields for GitHub stats like stars, forks, etc.
  stars         Int?     // Number of stars on repos
  forks         Int?     // Number of forks on repos
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
